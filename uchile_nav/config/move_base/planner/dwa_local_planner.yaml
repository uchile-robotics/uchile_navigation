
/bender/nav/move_base:
 base_local_planner: "dwa_local_planner/DWAPlannerROS"

# ----- Local planner -----
DWAPlannerROS:

 # Robot Configuration Parameters
 # - - - - - - - - - - - - - - - -
 # HINTS:
 # - check that: min_vel_x*sim_time < 2*xy_goal_tolerance # this prevents in place rotations

 # accel limits
 acc_lim_x      : 0.30 # [0..20]
 acc_lim_y      : 0.00 # [0..20]
 acc_lim_theta  : 1.80 # [0..20]
 acc_limit_trans: 0.30 # [0..20]

 # vel limits
 max_trans_vel:  0.5 # [  0 ..inf]
 min_trans_vel:  0.0 # [  0 ..inf]
 max_vel_x    :  0.5 # [-inf..inf]
 min_vel_x    : -0.1 # [-inf..inf]
 max_rot_vel  :  0.7 # [  0 ..inf]
 min_rot_vel  :  0.0 # [  0 ..inf]
 max_vel_y    :  0.0 # [-inf..inf]
 min_vel_y    :  0.0 # [-inf..inf]
 trans_stopped_vel: 0.1 # [-inf..inf] Below what maximum velocity we consider the robot to be stopped in translation
 rot_stopped_vel  : 0.1 # [-inf..inf] Below what maximum velocity we consider the robot to be stopped in rotation


 # Goal Tolerance Parameters
 # - - - - - - - - - - - - - - -
 # small values, because we expect that the goal server will check for this
 yaw_goal_tolerance: 0.30 # 17 deg
 xy_goal_tolerance:  0.30 # 30 cm
 # DEPRECATED latch_xy_goal_tolerance: true # el goal server funciona latcheado... primero XY y luego theta.

 # Forward Simulation Parameters
 # - - - - - - - - - - - - - - - -
 use_dwa: true
 sim_time: 2.0
 sim_granularity: 0.1
 angular_sim_granularity: 0.1 # (default: the same as sim_granularity)
 vx_samples: 5
 vy_samples: 0
 vth_samples: 5
 # controller_frequency: 20.0    # (default: loaded from a parent namespace)


 # Trajectory Scoring Parameters
 # - - - - - - - - - - - - - - - -
 path_distance_bias: 32 # global path weight
 goal_distance_bias: 20 # local goal weight (also increases speed)
 occdist_scale: 0.02    # obstacle avoidance weight

 # forward_point_distance: 0.325 #  The distance from the center point of the robot to place an additional scoring point.
 stop_time_buffer: 0.2 # The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds.
 scaling_speed: 0.35   # The absolute value of the velocity at which to start scaling the robot's footprint
 max_scaling_factor: 0.2 # he maximum factor to scale the robot's footprint by

 # Oscillation Prevention Parameters
 # - - - - - - - - - - - - - - - -
 oscillation_reset_dist: 0.05 # How far the robot must travel in meters before oscillation flags are reset
 oscillation_reset_angle: 0.2

 # Global Plan Parameters
 # - - - - - - - - - - - - - - - -
 prune_plan: true # eat up the plan as the robot moves along the path

 # sum_scores
 # cheat_factor: dwa_planner.cpp:277: if (sq_dist > forward_point_distance_ * forward_point_distance_ * cheat_factor_) { ...
 # publish_cost_grid_pc
 # publish_traj_pc
 # odom_topic
 # global_frame_id