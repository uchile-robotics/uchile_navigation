
/bender/nav/move_base:
 base_local_planner: "base_local_planner/TrajectoryPlannerROS"

# ----- Local planner -----
TrajectoryPlannerROS:

 # Robot Configuration Parameters
 # - - - - - - - - - - - - - - - -
 # HINTS:
 # - check that: min_vel_x*sim_time < 2*xy_goal_tolerance

 # accel limits
 acc_lim_x: 0.30
 acc_lim_y: 0
 acc_lim_theta: 1.5

 # vel limits
 max_vel_x: 0.35
 min_vel_x: 0.10
 max_vel_theta:  0.35
 min_vel_theta: -0.35
 min_in_place_vel_theta: 0.25

 # Cero para no retroceder
 escape_vel: -0.1

 holonomic_robot: false
 #y_vels: [-0.3, -0.1, 0.1, 0.3]  /* Solo para holonomicos */

 # Goal Tolerance Parameters
 # - - - - - - - - - - - - - - -
 # small values, because we expect that the goal server will check for this
 yaw_goal_tolerance: 0.17 # 10 deg
 xy_goal_tolerance:  0.15 # 15 cm
 latch_xy_goal_tolerance: true # el goal server funciona latcheado... primero XY y luego theta.


 # Forward Simulation Parameters
 # - - - - - - - - - - - - - - - -
 sim_time: 3.0
 sim_granularity: 0.025
 angular_sim_granularity: 0.025 # (default: the same as sim_granularity)
 vx_samples: 5
 vtheta_samples: 15
 # controller_frequency: 20.0    # (default: loaded from a parent namespace)


 # Trajectory Scoring Parameters
 # - - - - - - - - - - - - - - - -
 meter_scoring: true # meter or cell scoring
 pdist_scale: 1.5     # path weight
 gdist_scale: 1.0     # local goal weight (also increases speed)
 occdist_scale: 0.05  # obstacle avoidance weight
 heading_scoring: false   # whether to use angular/distance scoring to the path
 heading_lookahead: 0.325 # how far to look ahead when scoring in-place rotations
 heading_scoring_timestep: 0.8 # how far to look ahead in time when ...

 dwa: false  # whether to use DWA(recommended) or Trajectory Rollout

 publish_cost_grid_pc: true # publish cost grids (goal, path, occ, total)
 global_frame_id: bender/odom

 # Oscillation Prevention Parameters
 # - - - - - - - - - - - - - - - -
 oscillation_reset_dist: 0.03

 # Global Plan Parameters
 # - - - - - - - - - - - - - - - -
 prune_plan: true # eat up the plan as the robot moves along the path
