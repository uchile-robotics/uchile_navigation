global_costmap:

 # Coordinate frame and tf parameters
 global_frame: /map

 # Map management parameters
 # - - - - - - - - - - - - - -
 static_map: true       # global map is static (no slam)
 rolling_window: false
 # overwritten by the static layer costmap_2d plugin
 #width:  10
 #height: 10
 resolution: 0.1

 # Rate parameters
 # - - - - - - - - - - - - - -
 update_frequency: 0.5
 publish_frequency: 0.0
 # mapa global estatico => alta freq. actualizacion no necesaria
 # publish_frequency alta empeorara la red!!,.. solo sirve para visualizar


 # Inflation Layer
 # = = = = = = = = = = = = = = = = = = 
 # VERY IMPORTANT PARAMETER!: max radius at which inflate point obstacles p in P. 
 # if a point X is between  p and the robot circunscribed region CR, then the obstacle is inflated as a "possibly collision"
 # else if X is between the CR and "inflation_radius", then the obstacle is inflated as "definitely not in collision", 
 # but with a cost decay as function of distance to the inscribed region.
 # THIS MEANS: set this parameter > radius(CR) to advise the planner not to getting so close to obstacles.
 # more info on: http://wiki.ros.org/costmap_2d
 #
 # There is a matlab script to plot the decay behavior vs. inflation_radius and cost_scaling_factor
 # > plotCostmapCostDecay(0.4, 0.5, 1.5, [0.5 1 2 5 10])
 inflation_radius: 1.5
 cost_scaling_factor: 3
 # robot_radius: 0.34
 # #footprint: [ [-0.35, -0.35], [-0.35, 0.35],[0.2, 0.35],[0.26,0], [0.2, -0.35] ]
 # footprint_padding: 0.00
 footprint_topic: /bender/nav/footprint